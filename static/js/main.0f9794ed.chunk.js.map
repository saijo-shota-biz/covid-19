{"version":3,"sources":["components/bar-graph/BarGraph.tsx","components/button/Button.tsx","components/header/Header.tsx","components/heat-map/HeatMap.tsx","components/json/Json.tsx","components/loader/Loader.tsx","components/table/Table.tsx","App.tsx","index.tsx"],"names":["BarGraph","prefectures","useState","data","setData","useEffect","map","prefecture","name","name_ja","cases","width","height","margin","top","right","left","bottom","dataKey","fill","Button","label","selected","onClick","className","Header","HeatMap","features","setFeatures","colors","setColors","axios","get","then","res","feature","objects","japan","reduce","getColor","d","i","prefectureName","key","geoPath","projection","geoMercator","scale","center","stroke","strokeWidth","Json","Loader","Table","sortedData","setSortedData","sortKey","setSortKey","sortOrder","setSortOrder","sorted","sort","a","b","setSort","selectedKey","thClassName","id","align","population","toLocaleString","deaths","pcr","hospitalize","severe","discharge","App","setPrefectures","type","setType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f9794ed.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Bar, BarChart, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { Prefecture } from \"../../prefecture\";\r\n\r\nconst BarGraph: React.FC<{ prefectures: Prefecture[] }> = ({ prefectures }) => {\r\n\r\n  const [data, setData] = useState<{ name: string, cases: number }[]>([]);\r\n\r\n  useEffect(() => {\r\n    setData(prefectures.map(prefecture => ({ name: prefecture.name_ja, cases: prefecture.cases })));\r\n  }, [prefectures]);\r\n\r\n  return (\r\n    <BarChart\r\n      width={1200}\r\n      height={600}\r\n      data={data}\r\n      margin={{\r\n        top: 5, right: 30, left: 20, bottom: 5,\r\n      }}\r\n    >\r\n      <CartesianGrid />\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Bar dataKey=\"cases\" fill=\"#8884d8\" />\r\n    </BarChart>\r\n  )\r\n}\r\n\r\nexport default BarGraph;","import React from \"react\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button: React.FC<{ label: string, selected: boolean, onClick: () => void }> = ({ label, selected, onClick }) => {\r\nreturn <button className={\"button\" +  (selected ? \" selected\" : \"\")} onClick={onClick}>{ label }</button>\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">Covid19</div>\r\n  )\r\n}\r\n\r\nexport default Header;","import axios from 'axios';\r\nimport { geoMercator, geoPath } from 'd3-geo';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { feature } from 'topojson-client';\r\nimport { Prefecture } from \"../../prefecture\";\r\n\r\nconst HeatMap: React.FC<{ prefectures: Prefecture[] }> = ({ prefectures }) => {\r\n\r\n  const [features, setFeatures] = useState([]);\r\n  const [colors, setColors] = useState<{ [key: string]: string }>({});\r\n\r\n  useEffect(() => {\r\n    axios.get('./japan.topojson')\r\n      .then(res => {\r\n        setFeatures(feature(res.data, res.data.objects.japan).features);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setColors(prefectures.reduce((colors, prefecture) => {\r\n      colors[prefecture.name_ja] = getColor(prefecture);\r\n      return colors;\r\n    }, {}));\r\n  }, [prefectures])\r\n\r\n  const getColor = (prefecture: Prefecture): string => {\r\n    if (prefecture.cases > 1000) {\r\n      return \"#ff0000\";\r\n    } else if (prefecture.cases > 500) {\r\n      return \"#ff2b2b\";\r\n    } else if (prefecture.cases > 100) {\r\n      return \"#ff8080\";\r\n    } else if (prefecture.cases > 50) {\r\n      return \"#ffd5d5\";\r\n    } else if (prefecture.cases > 10) {\r\n      return \"#fff4f4\";\r\n    } else {\r\n      return \"#ffffff\"\r\n    }\r\n  }\r\n\r\n  const projection = () => {\r\n    return geoMercator()\r\n      .scale(1000)\r\n      .center([150, 36])\r\n  }\r\n\r\n  return (\r\n    <svg width={500} height={500}>\r\n      <g className=\"prefectures\">\r\n        {features.map((d, i) => {\r\n          const prefectureName = d[\"properties\"][\"nam_ja\"];\r\n          return (\r\n            <path\r\n              key={`path-${i}`}\r\n              d={geoPath().projection(projection())(d)}\r\n              className=\"prefecture\"\r\n              fill={colors[prefectureName]}\r\n              stroke=\"#333333\"\r\n              strokeWidth={0.5}\r\n            />\r\n          )\r\n        })}\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default HeatMap;","import React from \"react\";\r\nimport JSONTree from 'react-json-tree';\r\nimport { Prefecture } from \"../../prefecture\";\r\n\r\nconst Json: React.FC<{ prefectures: Prefecture[] }> = ({ prefectures }) => {\r\n  return <JSONTree data={prefectures} />;\r\n}\r\n\r\nexport default Json;","import React from \"react\";\r\nimport './Loader.scss';\r\n\r\nconst Loader = () => {\r\n  return (\r\n  <div className=\"loading\">\r\n    <div>Loading...</div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Loader;","import React, { useEffect, useState } from \"react\";\r\nimport { Prefecture } from \"../../prefecture\";\r\nimport \"./Table.scss\";\r\n\r\nconst Table: React.FC<{ prefectures: Prefecture[] }> = ({ prefectures }) => {\r\n\r\n  const [sortedData, setSortedData] = useState(prefectures);\r\n  const [sortKey, setSortKey] = useState(\"id\");\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | \"\">(\"\");\r\n\r\n  useEffect(() => {\r\n    const sorted = sortedData.sort((a, b) => {\r\n      if (sortOrder === \"asc\" || sortOrder === \"\") {\r\n        return a[sortKey] - b[sortKey]\r\n      } else if (sortOrder === \"desc\") {\r\n        return b[sortKey] - a[sortKey]\r\n      }\r\n      return 0;\r\n    });\r\n    setSortedData([...sorted]);\r\n  }, [sortKey, sortOrder]);\r\n\r\n  const setSort = (selectedKey: string) => {\r\n    if (selectedKey === sortKey) {\r\n      if (sortOrder === \"asc\") {\r\n        setSortOrder(\"desc\");\r\n      } else if (sortOrder === \"desc\") {\r\n        setSortOrder(\"\");\r\n        setSortKey(\"id\");\r\n      } else {\r\n        setSortOrder(\"asc\");\r\n      }\r\n    } else {\r\n      setSortOrder(\"asc\");\r\n      setSortKey(selectedKey);\r\n    }\r\n  }\r\n\r\n  const thClassName = (selectedKey: string) => {\r\n    return sortKey === selectedKey ? `sorted ${sortOrder}` : \"\"\r\n  }\r\n\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th className={thClassName(\"id\")} onClick={() => setSort(\"id\")}>No</th>\r\n          <th className=\"no-clickable\">都道府県名</th>\r\n          <th className={thClassName(\"population\")} onClick={() => setSort(\"population\")}>人口</th>\r\n          <th className={thClassName(\"cases\")} onClick={() => setSort(\"cases\")}>症例数</th>\r\n          <th className={thClassName(\"deaths\")} onClick={() => setSort(\"deaths\")}>死者数</th>\r\n          <th className={thClassName(\"pcr\")} onClick={() => setSort(\"pcr\")}>PCR検査数</th>\r\n          <th className={thClassName(\"hospitalize\")} onClick={() => setSort(\"hospitalize\")}>入院者数</th>\r\n          <th className={thClassName(\"severe\")} onClick={() => setSort(\"severe\")}>重度</th>\r\n          <th className={thClassName(\"discharge\")} onClick={() => setSort(\"discharge\")}>退院者数</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        { sortedData.map(prefecture => (\r\n          <tr key={prefecture.id}>\r\n            <td>{prefecture.id}</td>\r\n            <td>{prefecture.name_ja}</td>\r\n            <td align=\"right\">{prefecture.population.toLocaleString()}</td>\r\n            <td align=\"right\">{prefecture.cases.toLocaleString()}</td>\r\n            <td align=\"right\">{prefecture.deaths.toLocaleString()}</td>\r\n            <td align=\"right\">{prefecture.pcr.toLocaleString()}</td>\r\n            <td align=\"right\">{prefecture.hospitalize.toLocaleString()}</td>\r\n            <td align=\"right\">{prefecture.severe.toLocaleString()}</td>\r\n            <td align=\"right\">{prefecture.discharge.toLocaleString()}</td>\r\n          </tr>\r\n        )) }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;","import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport BarGraph from './components/bar-graph/BarGraph';\nimport Button from './components/button/Button';\nimport Header from './components/header/Header';\nimport HeatMap from './components/heat-map/HeatMap';\nimport Json from './components/json/Json';\nimport Loader from './components/loader/Loader';\nimport Table from './components/table/Table';\n\nconst App = () => {\n\n  const [prefectures, setPrefectures] = useState([]);\n  const [type, setType] = useState(0);\n\n  useEffect(() => {\n    axios.get('https://covid19-japan-web-api.now.sh/api/v1/prefectures')\n      .then(res => res.data)\n      .then(data => setPrefectures(data))\n      .then(() => setType(1));\n  }, []);\n  \n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <div className=\"buttons\">\n        <Button label=\"JSON\" selected={type === 1} onClick={() => setType(1)}></Button>\n        <Button label=\"TABLE\" selected={type === 2} onClick={() => setType(2)}></Button>\n        <Button label=\"HEAT MAP\" selected={type === 3} onClick={() => setType(3)}></Button>\n        <Button label=\"BAR GRAPH\" selected={type === 4} onClick={() => setType(4)}></Button>\n      </div>\n      <div className=\"contents\">\n      {\n        type === 0 ? <Loader />\n        : type === 1 ? <Json prefectures={prefectures} />\n        : type === 2 ? <Table prefectures={prefectures} />\n        : type === 3 ? <HeatMap prefectures={prefectures} />\n        : type === 4 ? <BarGraph prefectures={prefectures} />\n        : <></>\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}